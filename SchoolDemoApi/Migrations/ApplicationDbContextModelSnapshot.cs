// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolDemoApi.Data;

#nullable disable

namespace SchoolDemoApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.AnnBemiscode", b =>
                {
                    b.Property<int>("Bemisid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BEMISID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bemisid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<short?>("ProjectYear")
                        .HasColumnType("smallint");

                    b.Property<bool?>("ReCollectData")
                        .HasColumnType("bit");

                    b.Property<short>("UserId")
                        .HasColumnType("smallint")
                        .HasColumnName("UserID");

                    b.Property<bool?>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Bemisid")
                        .HasName("PK_AnnualBEMISCodes");

                    b.ToTable("AnnBEMISCodes", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.AnnBemiscodeDetail", b =>
                {
                    b.Property<int>("AnnualBemiscodeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnualBEMISCodeDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnualBemiscodeDetailId"), 1L, 1);

                    b.Property<string>("Bemiscode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BEMISCode");

                    b.Property<int>("Bemisid")
                        .HasColumnType("int")
                        .HasColumnName("BEMISID");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("SchoolID");

                    b.HasKey("AnnualBemiscodeDetailId")
                        .HasName("PK_BEMISDetail");

                    b.ToTable("AnnBEMISCodeDetails", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.AnnEnrollment", b =>
                {
                    b.Property<int>("AnnualEnrolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnualEnrolID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnualEnrolId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("PhotoRegAdmissionWtd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhotoRegAdmissionWTD");

                    b.Property<short?>("ProjectYear")
                        .HasColumnType("smallint");

                    b.Property<bool?>("RecollectData")
                        .HasColumnType("bit");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("SchoolID");

                    b.Property<short>("UserId")
                        .HasColumnType("smallint")
                        .HasColumnName("UserID");

                    b.Property<bool?>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("AnnualEnrolId")
                        .HasName("PK_AnnulErollments");

                    b.ToTable("AnnEnrollments");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.AnnEnrollmentDetail", b =>
                {
                    b.Property<int>("AnnualEnrollmentDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnualEnrollmentDetails"), 1L, 1);

                    b.Property<int>("AnnualEnrolId")
                        .HasColumnType("int")
                        .HasColumnName("AnnualEnrolID");

                    b.Property<short?>("AttendRegBoys")
                        .HasColumnType("smallint");

                    b.Property<short?>("AttendRegGirls")
                        .HasColumnType("smallint");

                    b.Property<string>("AttendRegPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("AttendRegTotal")
                        .HasColumnType("smallint");

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("ClassID");

                    b.Property<short>("NewEnrollBoys")
                        .HasColumnType("smallint");

                    b.Property<short>("NewEnrollGirls")
                        .HasColumnType("smallint");

                    b.Property<short>("NewEnrollTotal")
                        .HasColumnType("smallint");

                    b.HasKey("AnnualEnrollmentDetails")
                        .HasName("PK_AnnualClasses");

                    b.ToTable("AnnEnrollmentDetails");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.AppUser", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasKey("UserName");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SectionId");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Baseline", b =>
                {
                    b.Property<short>("Blid")
                        .HasColumnType("smallint")
                        .HasColumnName("BLID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionalReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCommunityWilling")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLandAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLecFormed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsLecFunctional")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsLecTrained")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsOwnBuilding")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsPtsmc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsPtsmcFunctional")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPtsmcTrained")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpace")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsSpacePlayArea")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsSpaceVertical")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<short>("NextLevelDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("NextLevelSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NonFuntionalReasion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PtsmcContact")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("PtsmcName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Ptsmcmembers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PTSMCMembers");

                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<string>("TeacherContact")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<bool?>("Verified")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("VisitorContact")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<short>("Within3kmHigh")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("Within3kmMiddle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("Within3kmPrimary")
                        .HasColumnType("smallint");

                    b.HasKey("Blid");

                    b.ToTable("Baselines");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselineEss", b =>
                {
                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<bool?>("AccessPotableWater")
                        .HasColumnType("bit");

                    b.Property<bool?>("AffectIncomeLevels")
                        .HasColumnType("bit");

                    b.Property<bool?>("AmbientNoiseLevels")
                        .HasColumnType("bit");

                    b.Property<bool?>("Archaeological")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttractForcedLabor")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChallengesEngagingWomen")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContaminatioGroundWater")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContaminationSoil")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContaminationSurfaceWater")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContestedOwnership")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CulturalSites")
                        .HasColumnType("bit");

                    b.Property<bool?>("DemolitionExistingStructures")
                        .HasColumnType("bit");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DestructionVegetation")
                        .HasColumnType("bit");

                    b.Property<bool?>("DestructionWildlife")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisturbanceDrainageChannels")
                        .HasColumnType("bit");

                    b.Property<bool?>("EncroachmentUrban")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvironmentalSocialDisturbance")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvironmentalSocialImpacts")
                        .HasColumnType("bit");

                    b.Property<bool?>("ErosionLand")
                        .HasColumnType("bit");

                    b.Property<bool?>("GenerateConstructionMaterial")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroundWaterSource")
                        .HasColumnType("bit");

                    b.Property<bool?>("HarmfulAirEmissions")
                        .HasColumnType("bit");

                    b.Property<bool?>("ImpactWomen")
                        .HasColumnType("bit");

                    b.Property<bool?>("ImpactsEthnicGroups")
                        .HasColumnType("bit");

                    b.Property<bool?>("IncreaseSocialInequalities")
                        .HasColumnType("bit");

                    b.Property<bool?>("ItLab")
                        .HasColumnType("bit");

                    b.Property<bool?>("ItLabFire")
                        .HasColumnType("bit");

                    b.Property<bool?>("ItLabVentilated")
                        .HasColumnType("bit");

                    b.Property<bool?>("LabFunctional")
                        .HasColumnType("bit");

                    b.Property<bool?>("LabVentilated")
                        .HasColumnType("bit");

                    b.Property<bool?>("LabWaste")
                        .HasColumnType("bit");

                    b.Property<bool?>("LabWasteDispose")
                        .HasColumnType("bit");

                    b.Property<bool?>("Laboratory")
                        .HasColumnType("bit")
                        .HasColumnName("laboratory");

                    b.Property<bool?>("LandDonatedVoluntarily")
                        .HasColumnType("bit");

                    b.Property<bool?>("LandownerAgreedVld")
                        .HasColumnType("bit")
                        .HasColumnName("LandownerAgreedVLD");

                    b.Property<bool?>("NaturalReserves")
                        .HasColumnType("bit");

                    b.Property<string>("NotMoreThan10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("One2KmAccessible")
                        .HasColumnType("bit");

                    b.Property<bool?>("OverloadSocialInfrastructure")
                        .HasColumnType("bit");

                    b.Property<bool?>("OwnerAwareDonation")
                        .HasColumnType("bit");

                    b.Property<bool?>("PossionOnePerson")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReduceAccessSchool")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefugeesSettled")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReligiousMonuments")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequireLandAcquisition")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequiresRawMaterials")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResettlementPopulation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResidualWastes")
                        .HasColumnType("bit");

                    b.Property<short?>("SchoolSid")
                        .HasColumnType("smallint")
                        .HasColumnName("SchoolSID");

                    b.Property<bool?>("SecurityProblems")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignificantLandDisturbance")
                        .HasColumnType("bit");

                    b.Property<bool?>("SocialDisruption")
                        .HasColumnType("bit");

                    b.Property<bool?>("SoilErosion")
                        .HasColumnType("bit");

                    b.Property<bool?>("SoilWaterContamination")
                        .HasColumnType("bit");

                    b.Property<bool?>("StagnantWaterBodies")
                        .HasColumnType("bit");

                    b.Property<bool?>("SurfaceWaterBodies")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportHazardous")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnplannedInfrastructure")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<bool?>("UseOfChemicals")
                        .HasColumnType("bit");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("VisitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("VldSignedAll")
                        .HasColumnType("bit");

                    b.Property<bool?>("WasteDump")
                        .HasColumnType("bit");

                    b.Property<bool?>("WastewaterNetwork")
                        .HasColumnType("bit");

                    b.Property<bool?>("WaterCourses")
                        .HasColumnType("bit");

                    b.Property<bool?>("Wetlands")
                        .HasColumnType("bit");

                    b.HasKey("Sid");

                    b.HasIndex("SchoolSid");

                    b.ToTable("BaselineEss", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselinePst", b =>
                {
                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<string>("BoundaryWallImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BoundaryWallImgTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("BoundryWallType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BuildingImgTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckedContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassroomsImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ClassroomsImgTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableBeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableClassroom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableToilet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("CrackSlabToilet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DismantleRoomsNum")
                        .HasColumnType("smallint");

                    b.Property<short>("DismantleRoomsQty")
                        .HasColumnType("smallint");

                    b.Property<short>("DismentleBoundaryWall")
                        .HasColumnType("smallint");

                    b.Property<short>("DismentleToiletNum")
                        .HasColumnType("smallint");

                    b.Property<short>("DismentleToiletQty")
                        .HasColumnType("smallint");

                    b.Property<decimal>("DistanceOfMainPipeline")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("DoesDryPitToilet")
                        .HasColumnType("bit");

                    b.Property<bool>("DoesExistGasPipeline")
                        .HasColumnType("bit");

                    b.Property<bool>("DoesPourFlushToilet")
                        .HasColumnType("bit");

                    b.Property<bool>("DoesViptoilet")
                        .HasColumnType("bit")
                        .HasColumnName("DoesVIPToilet");

                    b.Property<string>("Elevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionalToilet")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalToiletForBoys")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalToiletForGirls")
                        .HasColumnType("int");

                    b.Property<bool?>("HasWasteWaterDiverted")
                        .HasColumnType("bit");

                    b.Property<short>("ImagesTotal")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAdditionalItlab")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdditionalITLab");

                    b.Property<bool>("IsAdditionalLaboratory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalLibrary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalMultiPurposeHall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalMultipurposePlayArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBoundaryWall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrackInBeam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrackInColumn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrackInSlab")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDismantlingRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEcroom")
                        .HasColumnType("bit")
                        .HasColumnName("IsECRoom");

                    b.Property<bool>("IsElectricity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElectricityRepair")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExposedSteel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandWashArea")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHandWashAreaFunctional")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHandWashNeedMinorRepair")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHandWashNeedToConstructed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIrreparableCracksInWalls")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItlab")
                        .HasColumnType("bit")
                        .HasColumnName("IsITLab");

                    b.Property<bool>("IsLaboratory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLibrary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainGate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMhmstorageAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsMHMStorageAvailable");

                    b.Property<bool>("IsMultiPurposeHall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipurposePlayArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedNewGate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewBoundaryWallRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlantationArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPossibleToProvideGasConnection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPossibleToProvideWaterConnection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrincipalRoom")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProperDrainage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProvideElectricityConnection")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProvideSolarSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsRamp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRampConstructed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepairRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepairRequiredMainGate")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRequiredAdditionalClassRoom")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<bool>("IsSoakagePitConstructed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoakagePitNeedToRepair")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSolarSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsStaffRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaterAvailable")
                        .HasColumnType("bit");

                    b.Property<float>("Latitute")
                        .HasColumnType("real");

                    b.Property<decimal>("LengthOfBoundaryWall")
                        .HasColumnType("decimal(18,4)");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("NonFunctionalToilet")
                        .HasColumnType("int");

                    b.Property<string>("PlayAreaImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PlayAreaImgTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("ReasonForNonFunctionalToilet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeismicZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShapeOfProposedSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SiteArea")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("SiteLength")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("SiteVisitBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteVisitorDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SiteWidth")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("SteelRepairable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToiletType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToiletTypeOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToiletsImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ToiletsImgTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("ToiletsNeedRepair")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<int>("TotalAdditionalToiletRequired")
                        .HasColumnType("int");

                    b.Property<int>("TotalKachaRoom")
                        .HasColumnType("int");

                    b.Property<int>("TotalPakkaRoom")
                        .HasColumnType("int");

                    b.Property<short>("TotalRequiredAdditionalClassRoom")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalTgirderRoom")
                        .HasColumnType("int")
                        .HasColumnName("TotalTGirderRoom");

                    b.Property<int>("TotalToilet")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfExistingSchoolStructure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerifiedContact")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitedContact")
                        .HasColumnType("int");

                    b.Property<string>("WashImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("WashImgTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("WaterSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WaterSourceDistance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("WaterSourceForToilet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sid")
                        .HasName("PK_BaselinePst1");

                    b.ToTable("BaselinePst", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselinePstOld", b =>
                {
                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<string>("Access")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("AccessToHandWashArea")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("BoundryWallType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckedContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("CheckedDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionOfExistingBoundaryWall")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("CrackRepairableBeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableClassroom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrackRepairableToilet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DismantleRoomsNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("DismantleRoomsQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("DismentleBoundaryWall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("DismentleToiletNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("DismentleToiletQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<decimal>("DistanceOfMainPipeline")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DistanceOfMainWaterConnectionPipeline")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("DoesDryPitToilet")
                        .HasColumnType("bit");

                    b.Property<bool?>("DoesExistGasPipeline")
                        .HasColumnType("bit");

                    b.Property<string>("DoesExistingSchoolHaveWaterConnection")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("DoesPourFlushToilet")
                        .HasColumnType("bit");

                    b.Property<bool>("DoesViptoilet")
                        .HasColumnType("bit")
                        .HasColumnName("DoesVIPToilet");

                    b.Property<string>("DryPitToiletForProposed")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Elevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExistingMainGate")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FunctionalDryPitToilet")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FunctionalDryPitToiletForBoys")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FunctionalDryPitToiletForGirls")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FunctionalPourFlushToilet")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FunctionalPourFlushToiletForBoys")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FunctionalPourFlushToiletForGirls")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("FunctionalToilet")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalToiletForBoys")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalToiletForGirls")
                        .HasColumnType("int");

                    b.Property<string>("FunctionalViptoilet")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("FunctionalVIPToilet")
                        .IsFixedLength();

                    b.Property<string>("FunctionalViptoiletForBoys")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("FunctionalVIPToiletForBoys")
                        .IsFixedLength();

                    b.Property<string>("FunctionalViptoiletForGirls")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("FunctionalVIPToiletForGirls")
                        .IsFixedLength();

                    b.Property<string>("GateSizeHeight")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("GateSizeWidth")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("HasWasteWaterDiverted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalItlab")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdditionalITLab");

                    b.Property<bool>("IsAdditionalLaboratory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalLibrary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalMultiPurposeHall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdditionalMultipurposePlayArea")
                        .HasColumnType("bit");

                    b.Property<string>("IsAdditionalPrincipalRoom")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsAdditionalStaffRoom")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsBoundaryWall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrackInBeam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrackInColumn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrackInSlab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCrackSlabToilet")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsDismantlingRequired")
                        .HasColumnType("bit");

                    b.Property<string>("IsDryPitToiletOnRaisedPlatform")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsEcroom")
                        .HasColumnType("bit")
                        .HasColumnName("IsECRoom");

                    b.Property<bool>("IsElectricity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElectricityRepair")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExposedSteel")
                        .HasColumnType("bit");

                    b.Property<string>("IsFlooringForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsHandRailRequiredForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsHandWashArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandWashAreaFunctional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandWashNeedMinorRepair")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandWashNeedToConstructed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIrreparableCracksInWalls")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItlab")
                        .HasColumnType("bit")
                        .HasColumnName("IsITLab");

                    b.Property<bool>("IsLaboratory")
                        .HasColumnType("bit");

                    b.Property<string>("IsLevelingRequiredForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsLibrary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainGate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMhmstorageAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsMHMStorageAvailable");

                    b.Property<bool>("IsMultiPurposeHall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipurposePlayArea")
                        .HasColumnType("bit");

                    b.Property<string>("IsNearWaterConnectionLocation")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsNeedNewGate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewBoundaryWallRequired")
                        .HasColumnType("bit");

                    b.Property<string>("IsPaintRequiredForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsPipelineNearTheSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsPlantationArea")
                        .HasColumnType("bit");

                    b.Property<string>("IsPlantationAreaRequiredRepairing")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsPlasterRequiredForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsPossibleToProvideGasConnection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPossibleToProvideWaterConnection")
                        .HasColumnType("bit");

                    b.Property<string>("IsPourFlushToiletOnRaisedPlatform")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsPrincipalRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProperDrainage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProvideElectricityConnection")
                        .HasColumnType("bit");

                    b.Property<string>("IsPtclcablePass")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("IsPTCLCablePass")
                        .IsFixedLength();

                    b.Property<string>("IsRainWaterDrain")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsRamp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRampConstructed")
                        .HasColumnType("bit");

                    b.Property<string>("IsRampRequiredForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsRepairRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepairRequiredMainGate")
                        .HasColumnType("bit");

                    b.Property<string>("IsRoofScreedingRequiredForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsSeparateDryPitToilets")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsSeparatePourFlushToilets")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsSeparateViptoilets")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("IsSeparateVIPToilets")
                        .IsFixedLength();

                    b.Property<string>("IsSewerageInPourFlush")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsSewerageInVip")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("IsSewerageInVIP")
                        .IsFixedLength();

                    b.Property<string>("IsSewerageOnProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsSoakageForProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IsSoakagePitConstructed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSoakagePitNeedToRepair")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStaffRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaterAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitute")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LengthOfBoundaryWall")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LevelOfProposedSite")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NonFunctionalDryPitToilet")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("NonFunctionalDryPitToiletForBoys")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("NonFunctionalDryPitToiletForGirls")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("NonFunctionalPourFlushToilet")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("NonFunctionalPourFlushToiletForBoys")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("NonFunctionalPourFlushToiletForGirls")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("NonFunctionalToilet")
                        .HasColumnType("int");

                    b.Property<string>("NonFunctionalViptoilet")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("NonFunctionalVIPToilet")
                        .IsFixedLength();

                    b.Property<string>("NonFunctionalViptoiletForBoys")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("NonFunctionalVIPToiletForBoys")
                        .IsFixedLength();

                    b.Property<string>("ReasonForNonFunctionalToilet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SchoolSid")
                        .HasColumnType("smallint")
                        .HasColumnName("SchoolSID");

                    b.Property<string>("SeismicZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShapeOfProposedSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SiteArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SiteLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SiteVisitBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteVisitorDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SiteWidth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SteelRepairable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("test");

                    b.Property<string>("ToiletType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalAdditionalToiletRequired")
                        .HasColumnType("int");

                    b.Property<int>("TotalKachaRoom")
                        .HasColumnType("int");

                    b.Property<int>("TotalPakkaRoom")
                        .HasColumnType("int");

                    b.Property<short>("TotalRequiredAdditionalClassRoom")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalToilet")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfExistingSchoolStructure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerifiedContact")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitedContact")
                        .HasColumnType("int");

                    b.Property<string>("WaterSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WaterSourceDistance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaterSourceForToilet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sid")
                        .HasName("PK_BaselinePst");

                    b.HasIndex("SchoolSid");

                    b.ToTable("BaselinePstOld", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselinePstRoom", b =>
                {
                    b.Property<short>("Srid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("SRID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Srid"), 1L, 1);

                    b.Property<bool>("IsFlooringRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaintRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlasterRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoofScreedingRequired")
                        .HasColumnType("bit");

                    b.Property<decimal>("RoomHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RoomLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RoomWidth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short?>("SchoolSid")
                        .HasColumnType("smallint")
                        .HasColumnName("SchoolSID");

                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<int>("TotalRoomDoor")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomDoorRepair")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomDoorReplace")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomFanRequired")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomLightRequired")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomVentilator")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomVentilatorRepair")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomVentilatorReplace")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomWindow")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomWindowRepair")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomWindowReplace")
                        .HasColumnType("int");

                    b.HasKey("Srid")
                        .HasName("PK_BaselinePstRoom_1");

                    b.HasIndex("SchoolSid");

                    b.ToTable("BaselinePstRoom", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BlbuildingFacility", b =>
                {
                    b.Property<short>("Blid")
                        .HasColumnType("smallint")
                        .HasColumnName("BLID");

                    b.Property<bool?>("Boundrywall")
                        .HasColumnType("bit");

                    b.Property<bool?>("BoundrywallNew")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DoorsRepair")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("GateRepair")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsElectricity")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsElectricityInArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGas")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGasInArea")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPump")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPumpFunctional")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPumpNeeded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWater")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaterTank")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWaterTankNeeded")
                        .HasColumnType("bit");

                    b.Property<bool>("PlayArea")
                        .HasColumnType("bit");

                    b.Property<short>("RoomsFunction")
                        .HasColumnType("smallint");

                    b.Property<short>("RoomsKachaFunction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("RoomsKachaNeedRepair")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("RoomsKachaNonFunction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("RoomsKachaTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("RoomsNeedConstruct")
                        .HasColumnType("smallint");

                    b.Property<short>("RoomsNeedRepair")
                        .HasColumnType("smallint");

                    b.Property<short>("RoomsNonFunction")
                        .HasColumnType("smallint");

                    b.Property<short>("RoomsTotal")
                        .HasColumnType("smallint");

                    b.Property<short>("ToiletsBoysFunction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("ToiletsBoysNeedConstruct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("ToiletsBoysNeedRepair")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("ToiletsBoysNonFunction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("ToiletsBoysTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<short>("ToiletsFunction")
                        .HasColumnType("smallint");

                    b.Property<short>("ToiletsNeedConstruct")
                        .HasColumnType("smallint");

                    b.Property<short>("ToiletsNeedRepair")
                        .HasColumnType("smallint");

                    b.Property<short>("ToiletsNonFunction")
                        .HasColumnType("smallint");

                    b.Property<short>("ToiletsTotal")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<string>("WaterFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterFacilityOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterTankType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("WindowRepair")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.HasKey("Blid");

                    b.ToTable("BLbuildingFacilities", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BleceComputerLab", b =>
                {
                    b.Property<short>("Blid")
                        .HasColumnType("smallint")
                        .HasColumnName("BLID");

                    b.Property<string>("AssessmentFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssessment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputerLab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsComputerLabFunctional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEce")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEceMaterial")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEceMaterialUsing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEceTeacher")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEceTeacherTrained")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisitBaec")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReaLoadShedding")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReaNoComputer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReaNoElectric")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReaNoTeacher")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReaNoUsingCondition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReqElectrification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReqFurniture")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReqNewComputer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReqRepairLab")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ReqSolarSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<string>("VisitPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("WorkingComputers")
                        .HasColumnType("smallint");

                    b.HasKey("Blid");

                    b.ToTable("BLEceComputerLabs", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Blenrollment", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<short>("Blid")
                        .HasColumnType("smallint")
                        .HasColumnName("BLID");

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("ClassID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("EnrollBoys")
                        .HasColumnType("smallint");

                    b.Property<short>("EnrollGirls")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.HasKey("Id");

                    b.HasIndex("Blid");

                    b.ToTable("BLEnrollments", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BllibraryFurniture", b =>
                {
                    b.Property<short>("Blid")
                        .HasColumnType("smallint")
                        .HasColumnName("BLID");

                    b.Property<short>("ArmChairs")
                        .HasColumnType("smallint");

                    b.Property<short>("ArmChairsNeeded")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Desks")
                        .HasColumnType("smallint");

                    b.Property<short>("DesksNeeded")
                        .HasColumnType("smallint");

                    b.Property<short>("GilamEce")
                        .HasColumnType("smallint")
                        .HasColumnName("GilamECE");

                    b.Property<short>("GilamEceneeded")
                        .HasColumnType("smallint")
                        .HasColumnName("GilamECENeeded");

                    b.Property<bool>("IsLab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLabFunctional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLibrary")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLibraryFunctional")
                        .HasColumnType("bit");

                    b.Property<bool>("LabReaNoFurniture")
                        .HasColumnType("bit");

                    b.Property<bool>("LabReaNoItem")
                        .HasColumnType("bit");

                    b.Property<bool>("LabReaNoRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("LabReaNoTeacher")
                        .HasColumnType("bit");

                    b.Property<bool>("LabSugElectrification")
                        .HasColumnType("bit");

                    b.Property<bool>("LabSugFurniture")
                        .HasColumnType("bit");

                    b.Property<bool>("LabSugNewItem")
                        .HasColumnType("bit");

                    b.Property<bool>("LabSugRepair")
                        .HasColumnType("bit");

                    b.Property<bool>("LibReaNoBooks")
                        .HasColumnType("bit");

                    b.Property<bool>("LibReaNoFurniture")
                        .HasColumnType("bit");

                    b.Property<bool>("LibReaNoIncharge")
                        .HasColumnType("bit");

                    b.Property<bool>("LibSugElectrification")
                        .HasColumnType("bit");

                    b.Property<bool>("LibSugFurniture")
                        .HasColumnType("bit");

                    b.Property<bool>("LibSugRepair")
                        .HasColumnType("bit");

                    b.Property<short>("MultipurposeTables")
                        .HasColumnType("smallint");

                    b.Property<short>("MultipurposeTablesNeeded")
                        .HasColumnType("smallint");

                    b.Property<short>("TeacherChair")
                        .HasColumnType("smallint");

                    b.Property<short>("TeacherChairNeeded")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.HasKey("Blid");

                    b.ToTable("BLLibraryFurnitures", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BLteacher", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<short>("Blid")
                        .HasColumnType("smallint")
                        .HasColumnName("BLID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PostId")
                        .HasColumnType("smallint")
                        .HasColumnName("PostID");

                    b.Property<short>("TeachersPost")
                        .HasColumnType("smallint");

                    b.Property<short>("TrainedEce")
                        .HasColumnType("smallint");

                    b.Property<short>("TrainedInduction")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.HasKey("Id");

                    b.HasIndex("Blid");

                    b.HasIndex("PostId");

                    b.ToTable("bLTeachers", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Essconstruction", b =>
                {
                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("EmergencyExistRooms")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsArtifact")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBoots")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCodeOfConductSigned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCompensatoryPlantation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConstructionDisruptedSchool")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConstructionObstruction")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConstructionWaste")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCuttingTree")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmergencyExist")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEsmpguidelines")
                        .HasColumnType("bit")
                        .HasColumnName("IsESMPGuidelines");

                    b.Property<bool?>("IsExistingToiletRamp")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExistingToilethandrail")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFenced")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGloves")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHandWashArea")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHelmet")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNewToiletRamp")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNoPlantationArea")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPardaArrangement")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPond")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRaisedSchoolHandrail")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRaisedSchoolRamp")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRiskGbv")
                        .HasColumnType("bit")
                        .HasColumnName("IsRiskGBV");

                    b.Property<bool?>("IsSafetyTraining")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeparateToiletsConstructed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSewerage")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWasteWaterTowardsPlantation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsnewToiletHandrail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReaNoBudget")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReaNoLand")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReaNoWater")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReaTimeOver")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonNoSeparateToilets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SchoolSid")
                        .HasColumnType("smallint")
                        .HasColumnName("SchoolSID");

                    b.Property<short>("TreeRemoved")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sid");

                    b.HasIndex("SchoolSid");

                    b.ToTable("ESSConstruction", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.EssSiting", b =>
                {
                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<bool?>("AdditionalLand")
                        .HasColumnType("bit");

                    b.Property<bool?>("BuildingDepression")
                        .HasColumnType("bit");

                    b.Property<bool?>("BuildingHandrail")
                        .HasColumnType("bit");

                    b.Property<bool?>("BuildingOnGround")
                        .HasColumnType("bit");

                    b.Property<bool?>("BuildingRamp")
                        .HasColumnType("bit");

                    b.Property<bool?>("ClusterTrees")
                        .HasColumnType("bit");

                    b.Property<string>("ClusterTreesImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DifferentChild")
                        .HasColumnType("smallint");

                    b.Property<string>("ElectricPoleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ElectricPoleInside")
                        .HasColumnType("bit");

                    b.Property<string>("ElectricPoleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FireBlanket")
                        .HasColumnType("bit");

                    b.Property<bool?>("FireExtinguisher")
                        .HasColumnType("bit");

                    b.Property<bool?>("FloodPath")
                        .HasColumnType("bit");

                    b.Property<string>("FloodPathImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HandWashArea")
                        .HasColumnType("bit");

                    b.Property<string>("HandWashAreaRepair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HighwayAway")
                        .HasColumnType("bit");

                    b.Property<bool?>("Hill")
                        .HasColumnType("bit");

                    b.Property<string>("HillImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LandMutation")
                        .HasColumnType("bit");

                    b.Property<bool?>("LandSlideArea")
                        .HasColumnType("bit");

                    b.Property<string>("LandSlideAreaImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProperFlowOut")
                        .HasColumnType("bit");

                    b.Property<bool?>("SalineLand")
                        .HasColumnType("bit");

                    b.Property<string>("SalineLandImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SandBuckets")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpaceForPlantation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ToiletHandrail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ToiletOnGround")
                        .HasColumnType("bit");

                    b.Property<bool?>("ToiletRamp")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransmissionLines")
                        .HasColumnType("bit");

                    b.Property<string>("TransmissionLinesImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TreesInSchool")
                        .HasColumnType("bit");

                    b.Property<short>("TreesInSchoolNum")
                        .HasColumnType("smallint");

                    b.Property<short>("TreesNum")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedDate");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("WasetDumps")
                        .HasColumnType("bit");

                    b.Property<string>("WasetDumpsImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("WasteBinClasses")
                        .HasColumnType("bit");

                    b.Property<bool?>("WasteBinPlayground")
                        .HasColumnType("bit");

                    b.Property<bool?>("WaterAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Sid");

                    b.ToTable("EssSiting", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.School", b =>
                {
                    b.Property<short>("Sid")
                        .HasColumnType("smallint")
                        .HasColumnName("SID");

                    b.Property<string>("Bemis")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BEMIS");

                    b.Property<short>("Blstep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("BLStep")
                        .HasDefaultValueSql("(CONVERT([smallint],(0)))");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterBemis")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClusterBEMIS");

                    b.Property<string>("ClusterSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsIctlab")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsICTLab")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsProjectFocused")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsScienceLab")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsSolar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tehsil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UC");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sid");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.TeacherPost", b =>
                {
                    b.Property<short>("PostId")
                        .HasColumnType("smallint")
                        .HasColumnName("PostID");

                    b.Property<string>("PostFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("TeacherPosts");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Tool5", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("SchoolID");

                    b.Property<short>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<short>("ProjectYear")
                        .HasColumnType("smallint");

                    b.Property<bool>("ReCollectData")
                        .HasColumnType("bit");

                    b.Property<short?>("SchoolSid")
                        .HasColumnType("smallint")
                        .HasColumnName("SchoolSID");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("SchoolId", "Quarter");

                    b.HasIndex("SchoolSid");

                    b.ToTable("Tool5", (string)null);
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Tool5Detail", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnName("SchoolID");

                    b.Property<short>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("ClassID");

                    b.Property<short>("AttendRegBoys")
                        .HasColumnType("smallint");

                    b.Property<short>("AttendRegGirls")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("HeadCountBoys")
                        .HasColumnType("smallint");

                    b.Property<short>("HeadCountGirls")
                        .HasColumnType("smallint");

                    b.Property<short>("NewEnrollBoys")
                        .HasColumnType("smallint");

                    b.Property<short>("NewEnrolltGirls")
                        .HasColumnType("smallint");

                    b.Property<short?>("SchoolSid")
                        .HasColumnType("smallint")
                        .HasColumnName("SchoolSID");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SchoolId", "Quarter", "ClassId");

                    b.HasIndex("SchoolSid");

                    b.ToTable("Tool5Detail", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDemoApi.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.AppUser", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.Section", "Section")
                        .WithMany("AppUsers")
                        .HasForeignKey("SectionId")
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselineEss", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SchoolS")
                        .WithMany("BaselineEsses")
                        .HasForeignKey("SchoolSid");

                    b.Navigation("SchoolS");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselinePst", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SidNavigation")
                        .WithOne("BaselinePst")
                        .HasForeignKey("SchoolDemoApi.Data.Models.BaselinePst", "Sid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SidNavigation");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselinePstOld", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SchoolS")
                        .WithMany("BaselinePstOlds")
                        .HasForeignKey("SchoolSid")
                        .HasConstraintName("FK_BaselinePst_Schools_SchoolSID");

                    b.Navigation("SchoolS");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BaselinePstRoom", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SchoolS")
                        .WithMany("BaselinePstRooms")
                        .HasForeignKey("SchoolSid");

                    b.Navigation("SchoolS");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BlbuildingFacility", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.Baseline", "Bl")
                        .WithOne("BlbuildingFacility")
                        .HasForeignKey("SchoolDemoApi.Data.Models.BlbuildingFacility", "Blid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bl");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BleceComputerLab", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.Baseline", "Bl")
                        .WithOne("BleceComputerLab")
                        .HasForeignKey("SchoolDemoApi.Data.Models.BleceComputerLab", "Blid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bl");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Blenrollment", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.Baseline", "Bl")
                        .WithMany("Blenrollments")
                        .HasForeignKey("Blid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bl");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BllibraryFurniture", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.Baseline", "Bl")
                        .WithOne("BllibraryFurniture")
                        .HasForeignKey("SchoolDemoApi.Data.Models.BllibraryFurniture", "Blid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bl");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.BLteacher", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.Baseline", "Bl")
                        .WithMany("BLteachers")
                        .HasForeignKey("Blid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BLTeachers_Baselines_BLID");

                    b.HasOne("SchoolDemoApi.Data.Models.TeacherPost", "Post")
                        .WithMany("BLteachers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BLTeachers_TeacherPosts_PostID");

                    b.Navigation("Bl");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Essconstruction", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SchoolS")
                        .WithMany("Essconstructions")
                        .HasForeignKey("SchoolSid");

                    b.Navigation("SchoolS");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.EssSiting", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SidNavigation")
                        .WithOne("EssSiting")
                        .HasForeignKey("SchoolDemoApi.Data.Models.EssSiting", "Sid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SidNavigation");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Tool5", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SchoolS")
                        .WithMany("Tool5s")
                        .HasForeignKey("SchoolSid");

                    b.Navigation("SchoolS");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Tool5Detail", b =>
                {
                    b.HasOne("SchoolDemoApi.Data.Models.School", "SchoolS")
                        .WithMany("Tool5Details")
                        .HasForeignKey("SchoolSid");

                    b.HasOne("SchoolDemoApi.Data.Models.Tool5", "Tool5")
                        .WithMany("Tool5Details")
                        .HasForeignKey("SchoolId", "Quarter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolS");

                    b.Navigation("Tool5");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Baseline", b =>
                {
                    b.Navigation("BLteachers");

                    b.Navigation("BlbuildingFacility");

                    b.Navigation("BleceComputerLab");

                    b.Navigation("Blenrollments");

                    b.Navigation("BllibraryFurniture");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.School", b =>
                {
                    b.Navigation("BaselineEsses");

                    b.Navigation("BaselinePst");

                    b.Navigation("BaselinePstOlds");

                    b.Navigation("BaselinePstRooms");

                    b.Navigation("EssSiting");

                    b.Navigation("Essconstructions");

                    b.Navigation("Tool5Details");

                    b.Navigation("Tool5s");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Section", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.TeacherPost", b =>
                {
                    b.Navigation("BLteachers");
                });

            modelBuilder.Entity("SchoolDemoApi.Data.Models.Tool5", b =>
                {
                    b.Navigation("Tool5Details");
                });
#pragma warning restore 612, 618
        }
    }
}
